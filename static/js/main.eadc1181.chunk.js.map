{"version":3,"sources":["store/types/calculator.ts","utils/calculator.ts","reducers/calculatorReducer.ts","reducers/index.ts","store/index.ts","components/Calculator/Calculator.tsx","containers/Calculator/Calculator.tsx","actions/calculatorActions.ts","components/App/App.tsx","serviceWorker.js","index.js"],"names":["CalculatorActionsTypes","calculateExpression","expression","Function","concat","isMinus","symbol","initialState","leftOperand","rightOperand","currentOperator","result","error","calculatorReducer","state","arguments","length","undefined","action","type","ADD_OPERATION","isOperationSymbol","payload","includes","Object","objectSpread","isMultiplicationOrDivision","CALCULATE_RESULT","newResult","isNaN","CLEAR","rootReducer","combineReducers","calculator","store","createStore","applyMiddleware","logger","CalculatorWrapper","styled","div","_templateObject","Display","_templateObject2","Buttons","_templateObject3","Button","_templateObject4","props","background","hover","Calculator","handleClick","event","value","currentTarget","textContent","_this","addOperation","calculate","react_default","a","createElement","onClick","this","clear","_this$props","displayString","createDigitButton","createOperationButton","Component","connect","dispatch","operation","GlobalStyle","createGlobalStyle","App_templateObject","App","es","containers_Calculator_Calculator","Boolean","window","location","hostname","match","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eadc1181.chunk.js","sourcesContent":["export enum CalculatorActionsTypes {\r\n    ADD_OPERATION = '@@calculator/ADD_OPERATION',\r\n    CLEAR = '@@calculator/CLEAR',\r\n    CALCULATE_RESULT = '@@calculator/CALCULATE_RESULT',\r\n};\r\n\r\nexport interface AddOperationAction {\r\n    type: CalculatorActionsTypes.ADD_OPERATION;\r\n    payload: string;\r\n}\r\n\r\nexport interface ClearAction {\r\n    type: CalculatorActionsTypes.CLEAR;\r\n}\r\n\r\nexport interface CalculateResultAction {\r\n    type: CalculatorActionsTypes.CALCULATE_RESULT;\r\n}\r\n\r\nexport type CalculatorActions = AddOperationAction | ClearAction | CalculateResultAction;\r\n\r\nexport interface ICalculatorState {\r\n    readonly leftOperand: string;\r\n    readonly rightOperand: string;\r\n    readonly currentOperator: string;\r\n    readonly error: string;\r\n    readonly result: string;\r\n};","export const isOperation = (symbol: string) => {\r\n    return ['+', '-', '/', '*'].includes(symbol);\r\n}\r\n\r\nexport const calculateExpression = (expression: string) => {\r\n    return new Function(`return ${expression}`)();\r\n}\r\n\r\nexport const isMinus = (symbol: string) => {\r\n    return '-' === symbol;\r\n}\r\n\r\nexport const isMultiplicationOrDivision = (symbol: string) => {\r\n    return ['/', '*'].includes(symbol);\r\n}\r\n\r\n\r\n","import { ICalculatorState, CalculatorActionsTypes, CalculatorActions } from '../store/types/calculator';\r\nimport { isOperation, calculateExpression, isMinus, isMultiplicationOrDivision } from '../utils/calculator';\r\n\r\nconst initialState: ICalculatorState = {\r\n    leftOperand: '0',\r\n    rightOperand: '',\r\n    currentOperator: '',\r\n    result: '',\r\n    error: '',\r\n}\r\n\r\nconst calculatorReducer = (state: ICalculatorState = initialState, action: CalculatorActions): ICalculatorState => {\r\n    switch (action.type) {\r\n        case CalculatorActionsTypes.ADD_OPERATION:\r\n            const isOperationSymbol = isOperation(action.payload);\r\n\r\n            if (state.error) {\r\n                return {\r\n                    ...state,\r\n                    leftOperand: isOperationSymbol ? '0' : action.payload,\r\n                    currentOperator: isOperationSymbol ? action.payload : '',\r\n                    error: '',\r\n                }\r\n            }\r\n\r\n            if (state.result) {\r\n                return { \r\n                    ...state,\r\n                    leftOperand: isOperationSymbol ? state.result : action.payload,\r\n                    currentOperator: isOperationSymbol ? action.payload : '',\r\n                    result: '',\r\n                };\r\n            }\r\n\r\n            if (isOperationSymbol) {\r\n                if (!state.currentOperator) {\r\n                    return { ...state, currentOperator: action.payload};\r\n                }\r\n\r\n                if (!state.rightOperand) {\r\n                    if (isMultiplicationOrDivision(state.currentOperator) && isMinus(action.payload)) {\r\n                        return { ...state, rightOperand: action.payload };\r\n                    }\r\n\r\n                    if (state.currentOperator !== action.payload) {\r\n                        return { ...state, currentOperator: action.payload };\r\n                    }\r\n                }\r\n\r\n\r\n                if (!isMinus(state.rightOperand)) {\r\n                    return { \r\n                        ...state,\r\n                        currentOperator: action.payload,\r\n                        leftOperand: state.leftOperand + state.currentOperator + state.rightOperand,\r\n                        rightOperand: '',\r\n                    }\r\n                }\r\n            } else {\r\n                if (state.currentOperator) {\r\n                    return {\r\n                        ...state,\r\n                        rightOperand: state.rightOperand + action.payload,\r\n                    }\r\n                }\r\n                \r\n                return {\r\n                    ...state,\r\n                    leftOperand: state.leftOperand === '0' ? action.payload : state.leftOperand + action.payload,\r\n                };\r\n            }\r\n\r\n            return state;\r\n        \r\n        case CalculatorActionsTypes.CALCULATE_RESULT:\r\n            if (state.currentOperator) {\r\n                const newResult = !state.rightOperand || isMinus(state.rightOperand) ?\r\n                    calculateExpression(state.leftOperand) :\r\n                    calculateExpression(state.leftOperand + state.currentOperator + state.rightOperand);\r\n\r\n                if (isNaN(newResult)) {\r\n                    return { ...initialState, error: 'Error', };\r\n                }\r\n\r\n                return {\r\n                    ...state,\r\n                    result: newResult,\r\n                    currentOperator: '',\r\n                    rightOperand: '',\r\n                    leftOperand: '',\r\n                }\r\n            }\r\n\r\n            return state;\r\n\r\n        case CalculatorActionsTypes.CLEAR:\r\n            return { ...initialState }; \r\n            \r\n        default:\r\n            return state;\r\n            \r\n    }\r\n}\r\n\r\nexport default calculatorReducer;","import { combineReducers } from 'redux';\r\nimport { ICalculatorState } from '../store/types/calculator';\r\nimport calculatorReducer from './calculatorReducer';\r\n\r\nexport interface RootState {\r\n    calculator: ICalculatorState;\r\n}\r\n\r\nconst rootReducer = combineReducers<RootState>({\r\n    calculator: calculatorReducer,\r\n});\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux';\r\nimport logger from 'redux-logger';\r\nimport rootReducer from '../reducers';\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(logger));\r\n\r\nexport default store;","import React, { Component, MouseEvent, ReactNode } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport interface ICalculatorProps {\r\n    result: string;\r\n    leftOperand: string;\r\n    rightOperand: string;\r\n    currentOperator: string;\r\n    error: string;\r\n}\r\n\r\nexport interface ICalculatorDispatchProps {\r\n    addOperation: (operation: string) => void;\r\n    calculate: () => void;\r\n    clear: () => void;\r\n}\r\n\r\nexport interface ButtonProps {\r\n    background?: string;\r\n    hover?: string;\r\n}\r\n\r\nconst CalculatorWrapper = styled.div`\r\n    height: 500px;\r\n    width: 400px;\r\n    border: 1px solid black;\r\n    display: flex;\r\n    flex-direction: column;\r\n    background: #4D4D4D;\r\n    border: 5px solid #1A1A1A;\r\n    border-radius: 20px;\r\n    margin: 20px;\r\n    word-wrap: break-word;\r\n    box-shadow: 10px 10px 40px 10px black\r\n`;\r\n\r\nconst Display = styled.div`\r\n    background: black;\r\n    color: #00FF00;\r\n    text-shadow: 0 0 5px rgba(89, 195, 195, 0.5);\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    align-items: center;\r\n    margin: 30px;\r\n    box-sizing: border-box;\r\n    padding: 30px;\r\n    overflow: hidden;\r\n    font-size: 24px;\r\n    word-wrap: break-word;\r\n    position: relative;\r\n`;\r\n\r\nconst Buttons = styled.div`\r\n    padding: 15px;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    flex-direction: column;\r\n    height: 100%;\r\n    margin: 30px;\r\n    margin-top: 10px;\r\n    border-radius: 10px;\r\n    background: #666666;\r\n    user-select: none;\r\n    border: 3px solid #1A1A1A;\r\n`;\r\n\r\nconst Button = styled.div<ButtonProps>`\r\n    background: ${props => props.background ? props.background : '#65727A'};\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    font-size: 24px;\r\n    box-sizing: border-box;\r\n    border: 0.5px solid #3a372a;\r\n    border-radius: 10px;\r\n    color: white;\r\n    margin-top: 5px;\r\n    margin-left: 5px;\r\n    height: 23%;\r\n    cursor: pointer;\r\n\r\n    &:hover {\r\n        background: ${props => props.hover ? props.hover : '#818f98'};\r\n    }\r\n`;\r\n\r\nclass Calculator extends Component<ICalculatorProps & ICalculatorDispatchProps> {\r\n    public handleClick = (event: MouseEvent) => {\r\n        const value = event.currentTarget.textContent || '';\r\n        this.props.addOperation(value);\r\n    }\r\n\r\n    public calculate = () => {\r\n        this.props.calculate();\r\n    }\r\n\r\n    private createOperationButton(symbol: string): ReactNode {\r\n        return (\r\n            <Button\r\n                background=\"#cc6900\"\r\n                hover=\"#e27909\"\r\n                onClick={symbol === 'C' ? this.props.clear : this.handleClick}\r\n            >\r\n                {symbol}\r\n            </Button>\r\n        );\r\n    }\r\n\r\n    private createDigitButton(symbol: string): ReactNode {\r\n        return <Button onClick={this.handleClick}>{symbol}</Button>\r\n    }\r\n\r\n    public render() {\r\n        const { error, result, leftOperand, currentOperator, rightOperand } = this.props;\r\n\r\n        const displayString = result ? result : leftOperand + currentOperator + rightOperand;\r\n\r\n        return (\r\n            <CalculatorWrapper>\r\n                <Display>{error || displayString}</Display>\r\n                <Buttons>\r\n                    {this.createDigitButton('7')}\r\n                    {this.createDigitButton('4')}\r\n                    {this.createDigitButton('1')}\r\n                    {this.createOperationButton('C')}\r\n                    {this.createDigitButton('8')}\r\n                    {this.createDigitButton('5')}\r\n                    {this.createDigitButton('2')}\r\n                    {this.createDigitButton('0')}\r\n                    {this.createDigitButton('9')}\r\n                    {this.createDigitButton('6')}\r\n                    {this.createDigitButton('3')}\r\n                    <Button background=\"#008040\" hover=\"#14ad60\" onClick={this.props.calculate}>=</Button>\r\n                    {this.createOperationButton('+')}\r\n                    {this.createOperationButton('-')}\r\n                    {this.createOperationButton('*')}\r\n                    {this.createOperationButton('/')}\r\n                </Buttons>\r\n            </CalculatorWrapper>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Calculator;","import { connect } from 'react-redux';\r\nimport Calculator from '../../components/Calculator';\r\nimport { RootState } from '../../reducers';\r\nimport { Dispatch } from 'redux';\r\nimport { addOperation, calculateResult, clear } from '../../actions/calculatorActions';\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    ...state.calculator,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    addOperation: (operation: string) => dispatch(addOperation(operation)),\r\n    calculate: () => dispatch(calculateResult()),\r\n    clear: () => dispatch(clear()),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Calculator);","import { CalculatorActionsTypes, AddOperationAction, CalculateResultAction, ClearAction } from '../store/types/calculator';\r\n\r\nexport const addOperation = (operation: string): AddOperationAction => ({\r\n    type: CalculatorActionsTypes.ADD_OPERATION,\r\n    payload: operation,\r\n});\r\n\r\nexport const calculateResult = (): CalculateResultAction => ({\r\n    type: CalculatorActionsTypes.CALCULATE_RESULT,\r\n});\r\n\r\nexport const clear = (): ClearAction => ({\r\n    type: CalculatorActionsTypes.CLEAR\r\n});","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { createGlobalStyle } from 'styled-components';\r\nimport store from '../../store';\r\nimport Calculator from '../../containers/Calculator';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n    body, html {\r\n        margin: 0;\r\n        padding: 0;\r\n    }\r\n\r\n    body {\r\n        background: #F0E68C;\r\n    }\r\n\r\n    #root {\r\n        display: flex;\r\n        justify-content: center;\r\n    }\r\n`;\r\n\r\nconst App = () => (\r\n    <Provider store={store}>\r\n        <GlobalStyle />\r\n        <Calculator />\r\n    </Provider>\r\n);\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}