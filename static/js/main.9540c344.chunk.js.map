{"version":3,"sources":["store/types/calculator.ts","reducers/calculatorReducer.ts","reducers/index.ts","store/index.ts","components/Calculator/Calculator.tsx","containers/Calculator/Calculator.tsx","components/App/App.tsx","serviceWorker.js","index.js"],"names":["CalculatorActionsTypes","__webpack_require__","d","__webpack_exports__","isOperation","symbol","includes","isDot","initialState","currentOperand","expressions","result","calculatorReducer","state","arguments","length","undefined","action","type","ADD_OPERATION","newOperand","newExpressions","newResult","isOperationSymbol","payload","Object","C_projects_courses_homework_10_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","concat","C_projects_courses_homework_10_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","CALCULATE_RESULT","eval","join","CLEAR","rootReducer","combineReducers","calculator","store","createStore","applyMiddleware","logger","CalculatorWrapper","styled","div","_templateObject","Display","_templateObject2","Buttons","_templateObject3","Button","_templateObject4","props","background","Calculator","handleClick","event","value","currentTarget","textContent","_this","addOperation","calculate","displayString","this","react_default","a","createElement","onClick","clear","Component","connect","objectSpread","dispatch","operation","GlobalStyle","createGlobalStyle","App_templateObject","App","es","containers_Calculator_Calculator","Boolean","window","location","hostname","match","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9540c344.chunk.js","sourcesContent":["import { Action } from \"redux\";\r\n\r\nexport enum CalculatorActionsTypes {\r\n    ADD_OPERATION = '@@calculator/ADD_OPERATION',\r\n    CLEAR = '@@calculator/CLEAR',\r\n    CALCULATE_RESULT = '@@calculator/CALCULATE_RESULT',\r\n};\r\n\r\nexport interface AddOperationAction {\r\n    type: CalculatorActionsTypes.ADD_OPERATION;\r\n    payload: string;\r\n}\r\n\r\nexport interface ClearAction {\r\n    type: CalculatorActionsTypes.CLEAR;\r\n}\r\n\r\nexport interface CalculateResultAction {\r\n    type: CalculatorActionsTypes.CALCULATE_RESULT;\r\n}\r\n\r\nexport type CalculatorActions = AddOperationAction | ClearAction | CalculateResultAction;\r\n\r\nexport interface ICalculatorState {\r\n    readonly currentOperand: string;\r\n    readonly expressions: string[];\r\n    readonly result: string;\r\n};","import { ICalculatorState, CalculatorActionsTypes, CalculatorActions } from '../store/types/calculator';\r\n\r\nconst isOperation = (symbol: string) => {\r\n    return ['+', '-', '/', '*'].includes(symbol);\r\n}\r\n\r\nconst isDot = (symbol: string) => {\r\n    return '.' === symbol;\r\n}\r\n\r\nconst initialState: ICalculatorState = {\r\n    currentOperand: '0',\r\n    expressions: [],\r\n    result: '',\r\n}\r\n\r\nconst calculatorReducer = (state: ICalculatorState = initialState, action: CalculatorActions): ICalculatorState => {\r\n    switch (action.type) {\r\n        case CalculatorActionsTypes.ADD_OPERATION:\r\n            let newOperand: string;\r\n            let newExpressions: string[];\r\n            let newResult: string = '';\r\n            const isOperationSymbol = isOperation(action.payload);\r\n\r\n            if (state.result) {\r\n                newExpressions = isOperationSymbol ? [state.result, action.payload] : [];\r\n                newOperand = isOperationSymbol ? '' : action.payload;\r\n                newResult = '';\r\n\r\n                return { ...state, currentOperand: newOperand, result: newResult, expressions: newExpressions };\r\n            }\r\n\r\n            if (isOperationSymbol) {\r\n                if (state.currentOperand) {\r\n                    newExpressions = state.expressions.length ?\r\n                        [...state.expressions, state.currentOperand, action.payload] :\r\n                        [state.currentOperand, action.payload];\r\n                    return { ...state, currentOperand: '', expressions: newExpressions, result: '' };\r\n                }\r\n            } else {\r\n                if (state.currentOperand === '0') {\r\n                    return { ...state, currentOperand: action.payload };\r\n                }\r\n                \r\n                return { ...state, currentOperand: state.currentOperand + action.payload };\r\n            }\r\n\r\n        return state;\r\n\r\n        \r\n        case CalculatorActionsTypes.CALCULATE_RESULT:\r\n            const result = eval(state.expressions.join(\"\") + state.currentOperand);\r\n\r\n            return { ...state, currentOperand: '', expressions: [], result: result };\r\n\r\n        case CalculatorActionsTypes.CLEAR:\r\n            return { ...state, currentOperand: '0', expressions: [], result: ''}; \r\n\r\n        default:\r\n            return state;\r\n            \r\n    }\r\n}\r\n\r\nexport default calculatorReducer;","import { combineReducers } from 'redux';\r\nimport { ICalculatorState } from '../store/types/calculator';\r\nimport calculatorReducer from './calculatorReducer';\r\n\r\nexport interface RootState {\r\n    calculator: ICalculatorState;\r\n}\r\n\r\nconst rootReducer = combineReducers<RootState>({\r\n    calculator: calculatorReducer,\r\n});\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux';\r\nimport logger from 'redux-logger';\r\nimport rootReducer from '../reducers';\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(logger));\r\n\r\nexport default store;","import React, { Component, MouseEvent } from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface ICalculatorProps {\r\n    result: string;\r\n    expressions: string[];\r\n    currentOperand: string;\r\n}\r\n\r\ninterface ICalculatorDispatchProps {\r\n    addOperation: (operation: string) => void;\r\n    calculate: () => void;\r\n    clear: () => void;\r\n}\r\n\r\ninterface ButtonProps {\r\n    background?: string\r\n}\r\n\r\nconst CalculatorWrapper = styled.div`\r\n    height: 500px;\r\n    width: 400px;\r\n    border: 1px solid black;\r\n    display: flex;\r\n    flex-direction: column;\r\n    background: #4D4D4D;\r\n    border: 5px solid #1A1A1A;\r\n    border-radius: 20px;\r\n    margin: 20px;\r\n    box-shadow: 10px 10px 40px 10px black\r\n`;\r\n\r\nconst Display = styled.div`\r\n    background: black;\r\n    color: #00FF00;\r\n    text-shadow: 0 0 5px rgba(89, 195, 195, 0.5);\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    align-items: center;\r\n    margin: 30px;\r\n    box-sizing: border-box;\r\n    height: 20%;\r\n    padding: 30px;\r\n    overflow: hidden;\r\n    font-size: 24px;\r\n    position: relative;\r\n`;\r\n\r\nconst Buttons = styled.div`\r\n    padding: 15px;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    flex-direction: column;\r\n    height: 100%;\r\n    margin: 30px;\r\n    margin-top: 10px;\r\n    border-radius: 10px;\r\n    background: #666666;\r\n    border: 3px solid #1A1A1A;\r\n`;\r\n\r\nconst Button = styled.div<ButtonProps>`\r\n    background: ${props => props.background ? props.background : '#65727A'};\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    font-size: 24px;\r\n    box-sizing: border-box;\r\n    border: 0.5px solid #3a372a;\r\n    border-radius: 10px;\r\n    color: white;\r\n    margin-top: 5px;\r\n    margin-left: 5px;\r\n    height: 23%;\r\n    cursor: pointer;\r\n\r\n    &:hover {\r\n        background: #dbe0d9;\r\n    }\r\n`;\r\n\r\nclass Calculator extends Component<ICalculatorProps & ICalculatorDispatchProps> {\r\n    public handleClick = (event: MouseEvent) => {\r\n        const value = event.currentTarget.textContent || '';\r\n        this.props.addOperation(value);\r\n    }\r\n\r\n    public calculate = () => {\r\n        this.props.calculate();\r\n    }\r\n\r\n    public render() {\r\n        const displayString = this.props.result ? this.props.result : this.props.expressions.join(\"\") + this.props.currentOperand;\r\n\r\n        return (\r\n            <CalculatorWrapper>\r\n                <Display>{displayString}</Display>\r\n                <Buttons>\r\n                    <Button onClick={this.handleClick}>7</Button>\r\n                    <Button onClick={this.handleClick}>4</Button>\r\n                    <Button onClick={this.handleClick}>1</Button>\r\n                    <Button background=\"#B36B00\" onClick={this.props.clear}>C</Button>\r\n                    <Button onClick={this.handleClick}>8</Button>\r\n                    <Button onClick={this.handleClick}>5</Button>\r\n                    <Button onClick={this.handleClick}>2</Button>\r\n                    <Button onClick={this.handleClick}>0</Button>\r\n                    <Button onClick={this.handleClick}>9</Button>\r\n                    <Button onClick={this.handleClick}>6</Button>\r\n                    <Button onClick={this.handleClick}>3</Button>\r\n                    <Button background=\"#008040\" onClick={this.props.calculate}>=</Button>\r\n                    <Button background=\"#CBCC00\" onClick={this.handleClick}>+</Button>\r\n                    <Button background=\"#CBCC00\" onClick={this.handleClick}>-</Button>\r\n                    <Button background=\"#CBCC00\" onClick={this.handleClick}>*</Button>\r\n                    <Button background=\"#CBCC00\" onClick={this.handleClick}>/</Button>\r\n                </Buttons>\r\n            </CalculatorWrapper>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Calculator;","import { connect } from 'react-redux';\r\nimport Calculator from '../../components/Calculator';\r\nimport { RootState } from '../../reducers';\r\nimport { Dispatch } from 'redux';\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    ...state.calculator,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    addOperation: (operation: string) => dispatch({type: '@@calculator/ADD_OPERATION', payload: operation}),\r\n    calculate: () => dispatch({type: '@@calculator/CALCULATE_RESULT'}),\r\n    clear: () => dispatch({type: '@@calculator/CLEAR'}),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Calculator);","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { createGlobalStyle } from 'styled-components';\r\nimport store from '../../store';\r\nimport Calculator from '../../containers/Calculator';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n    body, html {\r\n        margin: 0;\r\n        padding: 0;\r\n    }\r\n\r\n    body {\r\n        background: #F0E68C;\r\n    }\r\n\r\n    #root {\r\n        display: flex;\r\n        justify-content: center;\r\n    }\r\n`;\r\n\r\nconst App = () => (\r\n    <Provider store={store}>\r\n        <GlobalStyle />\r\n        <Calculator />\r\n    </Provider>\r\n);\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}